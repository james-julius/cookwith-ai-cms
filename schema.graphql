# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  recipes(where: RecipeWhereInput! = {}, orderBy: [RecipeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RecipeWhereUniqueInput): [Recipe!]
  recipesCount(where: RecipeWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  recipes: RecipeManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input RecipeManyRelationFilter {
  every: RecipeWhereInput
  some: RecipeWhereInput
  none: RecipeWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  recipes: RecipeRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input RecipeRelateToManyForUpdateInput {
  disconnect: [RecipeWhereUniqueInput!]
  set: [RecipeWhereUniqueInput!]
  create: [RecipeCreateInput!]
  connect: [RecipeWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  recipes: RecipeRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input RecipeRelateToManyForCreateInput {
  create: [RecipeCreateInput!]
  connect: [RecipeWhereUniqueInput!]
}

type Recipe {
  id: ID!
  title: String
  images: ImageFieldOutput
  description: Recipe_description_Document
  nutritionalInformation(where: NutritionalInformationWhereInput! = {}, orderBy: [NutritionalInformationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NutritionalInformationWhereUniqueInput): [NutritionalInformation!]
  nutritionalInformationCount(where: NutritionalInformationWhereInput! = {}): Int
  ingredients(where: IngredientWhereInput! = {}, orderBy: [IngredientOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IngredientWhereUniqueInput): [Ingredient!]
  ingredientsCount(where: IngredientWhereInput! = {}): Int
  collections(where: CollectionWhereInput! = {}, orderBy: [CollectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CollectionWhereUniqueInput): [Collection!]
  collectionsCount(where: CollectionWhereInput! = {}): Int
  directions: Recipe_directions_Document
  author: User
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type Recipe_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Recipe_directions_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input RecipeWhereUniqueInput {
  id: ID
}

input RecipeWhereInput {
  AND: [RecipeWhereInput!]
  OR: [RecipeWhereInput!]
  NOT: [RecipeWhereInput!]
  id: IDFilter
  title: StringFilter
  nutritionalInformation: NutritionalInformationManyRelationFilter
  ingredients: IngredientManyRelationFilter
  collections: CollectionManyRelationFilter
  author: UserWhereInput
}

input NutritionalInformationManyRelationFilter {
  every: NutritionalInformationWhereInput
  some: NutritionalInformationWhereInput
  none: NutritionalInformationWhereInput
}

input IngredientManyRelationFilter {
  every: IngredientWhereInput
  some: IngredientWhereInput
  none: IngredientWhereInput
}

input CollectionManyRelationFilter {
  every: CollectionWhereInput
  some: CollectionWhereInput
  none: CollectionWhereInput
}

input RecipeOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input RecipeUpdateInput {
  title: String
  images: ImageFieldInput
  description: JSON
  nutritionalInformation: NutritionalInformationRelateToManyForUpdateInput
  ingredients: IngredientRelateToManyForUpdateInput
  collections: CollectionRelateToManyForUpdateInput
  directions: JSON
  author: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input NutritionalInformationRelateToManyForUpdateInput {
  disconnect: [NutritionalInformationWhereUniqueInput!]
  set: [NutritionalInformationWhereUniqueInput!]
  create: [NutritionalInformationCreateInput!]
  connect: [NutritionalInformationWhereUniqueInput!]
}

input IngredientRelateToManyForUpdateInput {
  disconnect: [IngredientWhereUniqueInput!]
  set: [IngredientWhereUniqueInput!]
  create: [IngredientCreateInput!]
  connect: [IngredientWhereUniqueInput!]
}

input CollectionRelateToManyForUpdateInput {
  disconnect: [CollectionWhereUniqueInput!]
  set: [CollectionWhereUniqueInput!]
  create: [CollectionCreateInput!]
  connect: [CollectionWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input RecipeUpdateArgs {
  where: RecipeWhereUniqueInput!
  data: RecipeUpdateInput!
}

input RecipeCreateInput {
  title: String
  images: ImageFieldInput
  description: JSON
  nutritionalInformation: NutritionalInformationRelateToManyForCreateInput
  ingredients: IngredientRelateToManyForCreateInput
  collections: CollectionRelateToManyForCreateInput
  directions: JSON
  author: UserRelateToOneForCreateInput
}

input NutritionalInformationRelateToManyForCreateInput {
  create: [NutritionalInformationCreateInput!]
  connect: [NutritionalInformationWhereUniqueInput!]
}

input IngredientRelateToManyForCreateInput {
  create: [IngredientCreateInput!]
  connect: [IngredientWhereUniqueInput!]
}

input CollectionRelateToManyForCreateInput {
  create: [CollectionCreateInput!]
  connect: [CollectionWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Ingredient {
  id: ID!
  name: String
  quantity: String
  unit: String
  imperialQuantity: String
  imperialUnit: String
  recipe: Recipe
}

input IngredientWhereUniqueInput {
  id: ID
}

input IngredientWhereInput {
  AND: [IngredientWhereInput!]
  OR: [IngredientWhereInput!]
  NOT: [IngredientWhereInput!]
  id: IDFilter
  name: StringFilter
  quantity: StringFilter
  unit: StringFilter
  imperialQuantity: StringFilter
  imperialUnit: StringFilter
  recipe: RecipeWhereInput
}

input IngredientOrderByInput {
  id: OrderDirection
  name: OrderDirection
  quantity: OrderDirection
  unit: OrderDirection
  imperialQuantity: OrderDirection
  imperialUnit: OrderDirection
}

input IngredientUpdateInput {
  name: String
  quantity: String
  unit: String
  imperialQuantity: String
  imperialUnit: String
  recipe: RecipeRelateToOneForUpdateInput
}

input RecipeRelateToOneForUpdateInput {
  create: RecipeCreateInput
  connect: RecipeWhereUniqueInput
  disconnect: Boolean
}

input IngredientUpdateArgs {
  where: IngredientWhereUniqueInput!
  data: IngredientUpdateInput!
}

input IngredientCreateInput {
  name: String
  quantity: String
  unit: String
  imperialQuantity: String
  imperialUnit: String
  recipe: RecipeRelateToOneForCreateInput
}

input RecipeRelateToOneForCreateInput {
  create: RecipeCreateInput
  connect: RecipeWhereUniqueInput
}

type NutritionalInformation {
  id: ID!
  calories: String
  carbohydrates: String
  cholesterol: String
  fat: String
  protein: String
  saturatedFat: String
  sodium: String
  sugars: String
  totalFat: String
  totalSaturatedFat: String
  totalSodium: String
  totalSugars: String
  totalTransFat: String
  recipe: Recipe
}

input NutritionalInformationWhereUniqueInput {
  id: ID
}

input NutritionalInformationWhereInput {
  AND: [NutritionalInformationWhereInput!]
  OR: [NutritionalInformationWhereInput!]
  NOT: [NutritionalInformationWhereInput!]
  id: IDFilter
  calories: StringFilter
  carbohydrates: StringFilter
  cholesterol: StringFilter
  fat: StringFilter
  protein: StringFilter
  saturatedFat: StringFilter
  sodium: StringFilter
  sugars: StringFilter
  totalFat: StringFilter
  totalSaturatedFat: StringFilter
  totalSodium: StringFilter
  totalSugars: StringFilter
  totalTransFat: StringFilter
  recipe: RecipeWhereInput
}

input NutritionalInformationOrderByInput {
  id: OrderDirection
  calories: OrderDirection
  carbohydrates: OrderDirection
  cholesterol: OrderDirection
  fat: OrderDirection
  protein: OrderDirection
  saturatedFat: OrderDirection
  sodium: OrderDirection
  sugars: OrderDirection
  totalFat: OrderDirection
  totalSaturatedFat: OrderDirection
  totalSodium: OrderDirection
  totalSugars: OrderDirection
  totalTransFat: OrderDirection
}

input NutritionalInformationUpdateInput {
  calories: String
  carbohydrates: String
  cholesterol: String
  fat: String
  protein: String
  saturatedFat: String
  sodium: String
  sugars: String
  totalFat: String
  totalSaturatedFat: String
  totalSodium: String
  totalSugars: String
  totalTransFat: String
  recipe: RecipeRelateToOneForUpdateInput
}

input NutritionalInformationUpdateArgs {
  where: NutritionalInformationWhereUniqueInput!
  data: NutritionalInformationUpdateInput!
}

input NutritionalInformationCreateInput {
  calories: String
  carbohydrates: String
  cholesterol: String
  fat: String
  protein: String
  saturatedFat: String
  sodium: String
  sugars: String
  totalFat: String
  totalSaturatedFat: String
  totalSodium: String
  totalSugars: String
  totalTransFat: String
  recipe: RecipeRelateToOneForCreateInput
}

type Collection {
  id: ID!
  name: String
  description: String
  recipes(where: RecipeWhereInput! = {}, orderBy: [RecipeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RecipeWhereUniqueInput): [Recipe!]
  recipesCount(where: RecipeWhereInput! = {}): Int
}

input CollectionWhereUniqueInput {
  id: ID
}

input CollectionWhereInput {
  AND: [CollectionWhereInput!]
  OR: [CollectionWhereInput!]
  NOT: [CollectionWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  recipes: RecipeManyRelationFilter
}

input CollectionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input CollectionUpdateInput {
  name: String
  description: String
  recipes: RecipeRelateToManyForUpdateInput
}

input CollectionUpdateArgs {
  where: CollectionWhereUniqueInput!
  data: CollectionUpdateInput!
}

input CollectionCreateInput {
  name: String
  description: String
  recipes: RecipeRelateToManyForCreateInput
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRecipe(data: RecipeCreateInput!): Recipe
  createRecipes(data: [RecipeCreateInput!]!): [Recipe]
  updateRecipe(where: RecipeWhereUniqueInput!, data: RecipeUpdateInput!): Recipe
  updateRecipes(data: [RecipeUpdateArgs!]!): [Recipe]
  deleteRecipe(where: RecipeWhereUniqueInput!): Recipe
  deleteRecipes(where: [RecipeWhereUniqueInput!]!): [Recipe]
  createIngredient(data: IngredientCreateInput!): Ingredient
  createIngredients(data: [IngredientCreateInput!]!): [Ingredient]
  updateIngredient(where: IngredientWhereUniqueInput!, data: IngredientUpdateInput!): Ingredient
  updateIngredients(data: [IngredientUpdateArgs!]!): [Ingredient]
  deleteIngredient(where: IngredientWhereUniqueInput!): Ingredient
  deleteIngredients(where: [IngredientWhereUniqueInput!]!): [Ingredient]
  createNutritionalInformation(data: NutritionalInformationCreateInput!): NutritionalInformation
  createNutritionalInformations(data: [NutritionalInformationCreateInput!]!): [NutritionalInformation]
  updateNutritionalInformation(where: NutritionalInformationWhereUniqueInput!, data: NutritionalInformationUpdateInput!): NutritionalInformation
  updateNutritionalInformations(data: [NutritionalInformationUpdateArgs!]!): [NutritionalInformation]
  deleteNutritionalInformation(where: NutritionalInformationWhereUniqueInput!): NutritionalInformation
  deleteNutritionalInformations(where: [NutritionalInformationWhereUniqueInput!]!): [NutritionalInformation]
  createCollection(data: CollectionCreateInput!): Collection
  createCollections(data: [CollectionCreateInput!]!): [Collection]
  updateCollection(where: CollectionWhereUniqueInput!, data: CollectionUpdateInput!): Collection
  updateCollections(data: [CollectionUpdateArgs!]!): [Collection]
  deleteCollection(where: CollectionWhereUniqueInput!): Collection
  deleteCollections(where: [CollectionWhereUniqueInput!]!): [Collection]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  recipes(where: RecipeWhereInput! = {}, orderBy: [RecipeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RecipeWhereUniqueInput): [Recipe!]
  recipe(where: RecipeWhereUniqueInput!): Recipe
  recipesCount(where: RecipeWhereInput! = {}): Int
  ingredients(where: IngredientWhereInput! = {}, orderBy: [IngredientOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IngredientWhereUniqueInput): [Ingredient!]
  ingredient(where: IngredientWhereUniqueInput!): Ingredient
  ingredientsCount(where: IngredientWhereInput! = {}): Int
  nutritionalInformations(where: NutritionalInformationWhereInput! = {}, orderBy: [NutritionalInformationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NutritionalInformationWhereUniqueInput): [NutritionalInformation!]
  nutritionalInformation(where: NutritionalInformationWhereUniqueInput!): NutritionalInformation
  nutritionalInformationsCount(where: NutritionalInformationWhereInput! = {}): Int
  collections(where: CollectionWhereInput! = {}, orderBy: [CollectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CollectionWhereUniqueInput): [Collection!]
  collection(where: CollectionWhereUniqueInput!): Collection
  collectionsCount(where: CollectionWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
